/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AboutUs } from "./AboutUs";
import { AboutUsCountArgs } from "./AboutUsCountArgs";
import { AboutUsFindManyArgs } from "./AboutUsFindManyArgs";
import { AboutUsFindUniqueArgs } from "./AboutUsFindUniqueArgs";
import { CreateAboutUsArgs } from "./CreateAboutUsArgs";
import { UpdateAboutUsArgs } from "./UpdateAboutUsArgs";
import { DeleteAboutUsArgs } from "./DeleteAboutUsArgs";
import { AboutUsService } from "../aboutUs.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AboutUs)
export class AboutUsResolverBase {
  constructor(
    protected readonly service: AboutUsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AboutUs",
    action: "read",
    possession: "any",
  })
  async _aboutusesMeta(
    @graphql.Args() args: AboutUsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AboutUs])
  @nestAccessControl.UseRoles({
    resource: "AboutUs",
    action: "read",
    possession: "any",
  })
  async aboutuses(
    @graphql.Args() args: AboutUsFindManyArgs
  ): Promise<AboutUs[]> {
    return this.service.aboutuses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AboutUs, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AboutUs",
    action: "read",
    possession: "own",
  })
  async aboutUs(
    @graphql.Args() args: AboutUsFindUniqueArgs
  ): Promise<AboutUs | null> {
    const result = await this.service.aboutUs(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AboutUs)
  @nestAccessControl.UseRoles({
    resource: "AboutUs",
    action: "create",
    possession: "any",
  })
  async createAboutUs(
    @graphql.Args() args: CreateAboutUsArgs
  ): Promise<AboutUs> {
    return await this.service.createAboutUs({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AboutUs)
  @nestAccessControl.UseRoles({
    resource: "AboutUs",
    action: "update",
    possession: "any",
  })
  async updateAboutUs(
    @graphql.Args() args: UpdateAboutUsArgs
  ): Promise<AboutUs | null> {
    try {
      return await this.service.updateAboutUs({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AboutUs)
  @nestAccessControl.UseRoles({
    resource: "AboutUs",
    action: "delete",
    possession: "any",
  })
  async deleteAboutUs(
    @graphql.Args() args: DeleteAboutUsArgs
  ): Promise<AboutUs | null> {
    try {
      return await this.service.deleteAboutUs(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
